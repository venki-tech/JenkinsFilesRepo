pipeline {

    agent { label 'slave'}

    stages {

        stage('Checkout Repos') {
          steps {
            cleanWs()
            //checkout scm
            ansiColor('xterm') {
              sh '''
                git clone https://github.com/venki-tech/aep-terraform-create-aws.git
                . ./supply_hosts.txt
                export LC_CTYPE=en_US.UTF-8
                export LC_ALL=en_US.UTF-8
                perl -i -pe "s/web_host/${web_host}/g" inventory.tmpl
                perl -i -pe "s/db_host/${db_host}/g" inventory.tmpl
                perl -i -pe "s/app_host/${app_host}/g" inventory.tmpl
              '''
            }
          }
        }

        stage ('Set Variables') {
            steps {
                script {
                  ansiColor('xterm') {
                    env.credentialsId = "awsCredentials"
                    env.githubCredentialsId = "github_clone"
                  }
                }
            }
        }

        stage('Copy Keys') {
          steps {
              //sh 'echo -e "y\n" | ssh-keygen -t rsa -N "" -f vvkey'
              ansiColor('xterm') {
                sh'''
                  if [[ ! -f ${HOME}/vvkey ]]; then
                    echo "New keys will be generated, and then copied over"
                    ssh-keygen -t rsa -N "" -f ${HOME}/vvkey

                    else
                    echo "Keys already present, will copy them into workspace"
                    fi
                    cp ${HOME}/vvkey* ${WORKSPACE}/aep-terraform-create-aws/
                    '''
              }
          }
        }

        stage('Copy Terraform init files') {
          steps {
            ansiColor('xterm') {
              sh'''
                if [[ ! -d ${WORKSPACE}/aep-terraform-create-aws/.terraform ]]; then
                  echo "Terraform init files dont exist."
                  cp -r ${HOME}/.terraform ${WORKSPACE}/aep-terraform-create-aws/
                else
                  echo "terraform init files exits, nothing to do"
                fi
              '''
            }
          }
        }

        stage('Terraform init') {
          steps {
            withCredentials([[
              $class: 'AmazonWebServicesCredentialsBinding',credentialsId: "${env:credentialsId}",accessKeyVariable: 'AWS_ACCESS_KEY_ID',secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
            ]]) {
                ansiColor('xterm') {
                  sh '''
                      cd ${WORKSPACE}/aep-terraform-create-aws/
                      terraform init
                  '''
                }
            }
          }
        }

        stage('Terraform Plan') {
          steps {
            withCredentials([[
              $class: 'AmazonWebServicesCredentialsBinding',credentialsId: "${env:credentialsId}",accessKeyVariable: 'AWS_ACCESS_KEY_ID',secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
            ]]) {
                ansiColor('xterm') {
                  sh '''
                    cd ${WORKSPACE}/aep-terraform-create-aws/
                    terraform plan
                  '''
                }
            }
          }
        }

        stage('Terraform Apply - Build Servers') {
          steps {
            withCredentials([[
              $class: 'AmazonWebServicesCredentialsBinding',credentialsId: "${env:credentialsId}",accessKeyVariable: 'AWS_ACCESS_KEY_ID',secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
            ]]) {
                ansiColor('xterm') {
                  sh '''
                    cd ${WORKSPACE}/aep-terraform-create-aws/
                    terraform apply -auto-approve
                  '''
                }
            }
          }
        }

        stage('Git Push terraform.tfstate to Repo') {
          steps {
            ansiColor('xterm') {
              sh '''
                echo "-------------------------------------"
                rm -rf ${WORKSPACE}/temp_repo_ws
                cd ${WORKSPACE}/aep-terraform-create-aws/
                git remote set-url origin git@github.com:venki-tech/aep-terraform-create-aws.git
                git add terraform.tfstate* inventory.txt
                git commit -m "Added terraform state files to repo" || true
                git push origin HEAD:master
                mkdir -p ${WORKSPACE}/temp_repo_ws
                cp terraform.tfstate* inventory.txt ${WORKSPACE}/temp_repo_ws
                rm -rf ${WORKSPACE}/aep-terraform-create-aws

                echo "-------------------------------------"
                cd ${WORKSPACE}
                git clone git@github.com:venki-tech/aws-terraform.git
                cd ${WORKSPACE}/aws-terraform
                git pull
                cp ${WORKSPACE}/temp_repo_ws/* .
                git add terraform.tfstate* inventory.txt
                git commit -m "Added terraform state files to repo" || true
                git push origin HEAD:master
                rm -rf ${WORKSPACE}/aws-terraform

                echo "-------------------------------------"
                cd ${WORKSPACE}
                git clone git@github.com:venki-tech/aep-ansible-provision.git
                cd ${WORKSPACE}/aep-ansible-provision
                git pull
                cp ${WORKSPACE}/temp_repo_ws/* .
                git add terraform.tfstate* inventory.txt
                git commit -m "Added terraform state files to repo" || true
                git push origin HEAD:master
                rm -rf ${WORKSPACE}/aep-ansible-provision
              '''
            }
          }
        }

        /*
        update tfstate files to other original repos
        send the inventory files to the ansible repos
        */
/*
        sh '''
          git clone https://github.com/venki-tech/aep-terraform-create-aws.git
        '''

        stage('Ansible - Provision App Server') {
          steps {
            ansiColor('xterm') {
              sh 'ansible-playbook aws_ansible_pb_provision_appserver.yaml -i inventory.txt'
            }
          }
        }

        stage('Ansible - Provision DB Server') {
          steps {
            ansiColor('xterm') {
              sh 'ansible-playbook aws_ansible_pb_provision_dbserver.yaml -i inventory.txt'
            }
          }
        }

        stage('Ansible - Provision WEB Server') {
          steps {
            ansiColor('xterm') {
              sh 'ansible-playbook aws_ansible_pb_provision_webserver.yaml -i inventory.txt'
            }
          }
        }
*/

    }

    post {
        success {
            echo "Success"
        }
        unstable {
            echo "Unstable"
        }
        aborted {
            echo "Aborted"
        }
        failure {
            echo "FAILURE"
        }
    }
}
