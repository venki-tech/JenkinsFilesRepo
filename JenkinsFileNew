pipeline {

    agent { label 'slave'}

    stages {

        stage('Checkout Repos') {
          steps {
            cleanWs()
            //checkout scm
            ansiColor('xterm') {
              sh '''
                git clone https://github.com/venki-tech/aep-terraform-create-aws.git
                chmod 755 ${WORKSPACE}/aep-terraform-create-aws/
                cd ${WORKSPACE}/aep-terraform-create-aws/
                . ./supply_hosts.txt

                suff=$(echo ${web_host}|rev|cut -c 1-2|rev)
                pref=$(echo ${web_host}|cut -c 1-6)
                keyname=$(echo $pref""$suff)

                echo "keyname=$keyname" >> ${WORKSPACE}/aep-terraform-create-aws/supply_hosts.txt

                export LC_CTYPE=en_US.UTF-8
                export LC_ALL=en_US.UTF-8
                perl -i -pe "s/web_host/${web_host}/g" inventory.tmpl variables.tf
                perl -i -pe "s/db_host/${db_host}/g" inventory.tmpl variables.tf
                perl -i -pe "s/app_host/${app_host}/g" inventory.tmpl variables.tf
                perl -i -pe "s/_replacekey_/${keyname}/g" inventory.tmpl variables.tf


                if [[ -f terraform.tfstate ]];then
                  echo "terraform.tfstate exists. will check if the hosts are already provisioned."
                  present=$(egrep "${db_host}|${web_host}|${app_host}" terraform.tfstate|wc -c)
                  if [[ ${present} -gt 1 ]];then
                    echo "Hosts already provisioned, will allow the pipeline to run as is. Terraform knows what to do"
                  else
                    echo "The hosts are not provisioned, so will have to rename and move the terraform.tfstate file else server wont be build."
                    ts=$(date +"%Y%m%d%H%M%S")
                    mkdir -p ${WORKSPACE}/aep-terraform-create-aws/decom
                    mv terraform.tfstate ${WORKSPACE}/aep-terraform-create-aws/decom/terraform.tfstate_${ts}
                    git add ${WORKSPACE}/aep-terraform-create-aws/decom/*
                    git commit -m "Added decom dir and state files to repo" || true
                    echo "Proceed to build servers with new host names"
                  fi
                else
                  echo "This is a new build, no previous state files"
                fi
              '''
            }
          }
        }

        stage ('Set Variables') {
            steps {
                script {
                  ansiColor('xterm') {
                    env.credentialsId = "awsCredentials"
                    env.githubCredentialsId = "github_clone"
                  }
                }
            }
        }

        stage('Copy Keys') {
          steps {
              //sh 'echo -e "y\n" | ssh-keygen -t rsa -N "" -f vvkey'
              ansiColor('xterm') {
                sh'''
                  if [[ ! -f ${HOME}/vvkey ]]; then
                    echo "New keys will be generated, and then copied over"
                    ssh-keygen -t rsa -N "" -f ${HOME}/vvkey
                  else
                    echo "Keys already present, will copy them into workspace"
                  fi
                  cp ${HOME}/vvkey* ${WORKSPACE}/aep-terraform-create-aws/
                  cd ${WORKSPACE}/aep-terraform-create-aws/
                  . ./supply_hosts.txt
                  mv vvkey ${keyname}
                  mv vvkey.pub ${keyname}.pub
                '''
              }
          }
        }

        stage('Copy Terraform init files') {
          steps {
            ansiColor('xterm') {
              sh'''
                if [[ ! -d ${WORKSPACE}/aep-terraform-create-aws/.terraform ]]; then
                  echo "Terraform init files dont exist."
                  cp -r ${HOME}/.terraform ${WORKSPACE}/aep-terraform-create-aws/
                else
                  echo "terraform init files exits, nothing to do"
                fi
              '''
            }
          }
        }

        stage('Terraform init') {
          steps {
            withCredentials([[
              $class: 'AmazonWebServicesCredentialsBinding',credentialsId: "${env:credentialsId}",accessKeyVariable: 'AWS_ACCESS_KEY_ID',secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
            ]]) {
                ansiColor('xterm') {
                  sh '''
                      cd ${WORKSPACE}/aep-terraform-create-aws/
                      terraform init
                  '''
                }
            }
          }
        }

        stage('Terraform Plan') {
          steps {
            withCredentials([[
              $class: 'AmazonWebServicesCredentialsBinding',credentialsId: "${env:credentialsId}",accessKeyVariable: 'AWS_ACCESS_KEY_ID',secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
            ]]) {
                ansiColor('xterm') {
                  sh '''
                    cd ${WORKSPACE}/aep-terraform-create-aws/
                    terraform plan
                  '''
                }
            }
          }
        }

        stage('Terraform Apply - Build Servers') {
          steps {
            withCredentials([[
              $class: 'AmazonWebServicesCredentialsBinding',credentialsId: "${env:credentialsId}",accessKeyVariable: 'AWS_ACCESS_KEY_ID',secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
            ]]) {
                ansiColor('xterm') {
                  sh '''
                    cd ${WORKSPACE}/aep-terraform-create-aws/
                    terraform apply -auto-approve
                  '''
                }
            }
          }
        }

        stage('Git Push terraform.tfstate to Repo') {
          steps {
            ansiColor('xterm') {
              sh '''
              echo "-------------------------------------"
              rm -rf ${WORKSPACE}/temp_repo_ws
              cd ${WORKSPACE}/aep-terraform-create-aws/
              git remote set-url origin git@github.com:venki-tech/aep-terraform-create-aws.git
              git add terraform.tfstate* inventory.txt
              git commit -m "Added terraform state files to repo" || true
              git push origin HEAD:master
              mkdir -p ${WORKSPACE}/temp_repo_ws
              cp terraform.tfstate* inventory.txt ${WORKSPACE}/temp_repo_ws
              rm -rf ${WORKSPACE}/aep-terraform-create-aws

              echo "-------------------------------------"
              cd ${WORKSPACE}
              git clone git@github.com:venki-tech/aws-terraform.git
              cd ${WORKSPACE}/aws-terraform
              git pull
              cp ${WORKSPACE}/temp_repo_ws/* .
              git add terraform.tfstate* inventory.txt
              git commit -m "Added terraform state files to repo" || true
              git push origin HEAD:master
              rm -rf ${WORKSPACE}/aws-terraform

              echo "-------------------------------------"
              cd ${WORKSPACE}
              git clone git@github.com:venki-tech/aep-ansible-provision.git
              cd ${WORKSPACE}/aep-ansible-provision
              git pull
              if [[ -f runninginventory.txt ]];then
                echo "Running inventory file exists. Will add the new hosts into it.
                cp ${WORKSPACE}/temp_repo_ws/inventory.txt .
                perl -0777 -nle "print $1 if m/\(\\[all\\]\(.|\\n|\\r\)*\)\\[aws_instances/g" runninginventory.txt >> newrunninginventory.txt
                perl -0777 -nle "print $1 if m/all\\]\(\(.|\\n|\\r\)*\)\\[aws_instances/g" inventory.txt >> newrunninginventory.txt
                perl -0777 -nle "print $1 if m/\(\\[aws_instances\\]\(.|\\n|\\r\)*\)/g" runninginventory.txt  >> newrunninginventory.txt
                perl -0777 -nle "print $1 if m/aws_instances\\]\(\(.|\\n|\\r\)*\)/g" inventory.txt >> newrunninginventory.txt
                mv -f newrunninginventory.txt runninginventory.txt
                rm -f inventory.txt
              else
                echo "Running inventory file doesnt exist. Will just rename inventory file as runninginventory file"
                cp ${WORKSPACE}/temp_repo_ws/inventory.txt .
                mv inventory.txt runninginventory.txt
              fi
              git add *inventory*
              git commit -m "Added inventory files to repo" || true
              git push origin HEAD:master
              rm -rf ${WORKSPACE}/aep-ansible-provision
              '''
            }
          }
        }


/*
        stage('Ansible - Provision App Server') {
          steps {
            ansiColor('xterm') {
              sh 'ansible-playbook aws_ansible_pb_provision_appserver.yaml -i inventory.txt'
            }
          }
        }

        stage('Ansible - Provision DB Server') {
          steps {
            ansiColor('xterm') {
              sh 'ansible-playbook aws_ansible_pb_provision_dbserver.yaml -i inventory.txt'
            }
          }
        }

        stage('Ansible - Provision WEB Server') {
          steps {
            ansiColor('xterm') {
              sh 'ansible-playbook aws_ansible_pb_provision_webserver.yaml -i inventory.txt'
            }
          }
        }
*/

    }

    post {
        success {
            echo "Success"
        }
        unstable {
            echo "Unstable"
        }
        aborted {
            echo "Aborted"
        }
        failure {
            echo "FAILURE"
        }
    }
}
