pipeline {

    agent { label 'slave'}

    stages {

        stage('Checkout Repos') {
          steps {
            cleanWs()
            //checkout scm
            ansiColor('xterm') {
              sh '''
                git clone https://github.com/venki-tech/aep-terraform-create-aws.git
                chmod 755 ${WORKSPACE}/aep-terraform-create-aws/
                cd ${WORKSPACE}/aep-terraform-create-aws/
                . ./supply_hosts.txt

                suff=$(echo ${web_host}|rev|cut -c 1-2|rev)
                pref=$(echo ${web_host}|cut -c 1-6)
                keyname=$(echo $pref""$suff)

                echo "keyname=$keyname" >> ${WORKSPACE}/aep-terraform-create-aws/supply_hosts.txt
                echo "hosts_exists=no" >> ${WORKSPACE}/aep-terraform-create-aws/supply_hosts.txt

                export LC_CTYPE=en_US.UTF-8
                export LC_ALL=en_US.UTF-8
                perl -i -pe "s/web_host/${web_host}/g" inventory.tmpl variables.tf
                perl -i -pe "s/db_host/${db_host}/g" inventory.tmpl variables.tf
                perl -i -pe "s/app_host/${app_host}/g" inventory.tmpl variables.tf
                perl -i -pe "s/_replacekey_/${keyname}/g" inventory.tmpl variables.tf


                if [[ -f terraform.tfstate ]];then
                  echo "terraform.tfstate exists. will check if the hosts are already provisioned."
                  present=$(egrep "${db_host}|${web_host}|${app_host}" terraform.tfstate|wc -c)
                  if [[ ${present} -gt 1 ]];then
                    echo "Hosts already provisioned, will allow the pipeline to run as is. Terraform knows what to do"
                    perl -i -pe 's/hosts_exists=no/hosts_exists=yes/g' ${WORKSPACE}/aep-terraform-create-aws/supply_hosts.txt
                  else
                    echo "The hosts are not provisioned, so will have to rename and move the terraform.tfstate file else server wont be build."
                    ts=$(date +"%Y%m%d%H%M%S")
                    mkdir -p ${WORKSPACE}/aep-terraform-create-aws/decom
                    mv terraform.tfstate ${WORKSPACE}/aep-terraform-create-aws/decom/terraform.tfstate_${ts}
                    git add ${WORKSPACE}/aep-terraform-create-aws/decom/*
                    git commit -m "Added decom dir and state files to repo" || true
                    echo "Proceed to build servers with new host names"
                  fi
                else
                  echo "This is a new build, no previous state files"
                fi
              '''
            }
          }
        }

        stage ('Set Variables') {
            steps {
                script {
                  ansiColor('xterm') {
                    env.credentialsId = "awsCredentials"
                    env.githubCredentialsId = "github_clone"
                  }
                }
            }
        }

        stage('Copy Keys') {
          steps {
              //sh 'echo -e "y\n" | ssh-keygen -t rsa -N "" -f vvkey'
              ansiColor('xterm') {
                sh'''
                  if [[ ! -f ${HOME}/vvkey ]]; then
                    echo "New keys will be generated, and then copied over"
                    ssh-keygen -t rsa -N "" -f ${HOME}/vvkey
                  else
                    echo "Keys already present, will copy them into workspace"
                  fi
                  cp ${HOME}/vvkey* ${WORKSPACE}/aep-terraform-create-aws/
                  cd ${WORKSPACE}/aep-terraform-create-aws/
                  . ./supply_hosts.txt
                  mv vvkey ${keyname}
                  mv vvkey.pub ${keyname}.pub
                  mkdir -p ${HOME}/keys
                  cp ${keyname}* ${HOME}/keys/
                '''
              }
          }
        }

        stage('Copy Terraform init files') {
          steps {
            ansiColor('xterm') {
              sh'''
                if [[ ! -d ${WORKSPACE}/aep-terraform-create-aws/.terraform ]]; then
                  echo "Terraform init files dont exist."
                  cp -r ${HOME}/.terraform ${WORKSPACE}/aep-terraform-create-aws/
                else
                  echo "terraform init files exits, nothing to do"
                fi
              '''
            }
          }
        }

        stage('Terraform init') {
          steps {
            withCredentials([[
              $class: 'AmazonWebServicesCredentialsBinding',credentialsId: "${env:credentialsId}",accessKeyVariable: 'AWS_ACCESS_KEY_ID',secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
            ]]) {
                ansiColor('xterm') {
                  sh '''
                      cd ${WORKSPACE}/aep-terraform-create-aws/
                      terraform init
                  '''
                }
            }
          }
        }

        stage('Terraform Plan') {
          steps {
            withCredentials([[
              $class: 'AmazonWebServicesCredentialsBinding',credentialsId: "${env:credentialsId}",accessKeyVariable: 'AWS_ACCESS_KEY_ID',secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
            ]]) {
                ansiColor('xterm') {
                  sh '''
                    cd ${WORKSPACE}/aep-terraform-create-aws/
                    terraform plan
                  '''
                }
            }
          }
        }

        stage('Terraform Apply - Build Servers') {
          steps {
            withCredentials([[
              $class: 'AmazonWebServicesCredentialsBinding',credentialsId: "${env:credentialsId}",accessKeyVariable: 'AWS_ACCESS_KEY_ID',secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
            ]]) {
                ansiColor('xterm') {
                  sh '''
                    cd ${WORKSPACE}/aep-terraform-create-aws/
                    terraform apply -auto-approve
                  '''
                }
            }
          }
        }

        stage('Git Push terraform.tfstate to Repo') {
          steps {
            ansiColor('xterm') {
              sh '''
                  chmod -R 755 ${WORKSPACE}/aep-terraform-create-aws/
                  cd ${WORKSPACE}/aep-terraform-create-aws/
                  ./createInventory.sh
              '''
            }
          }
        }


        stage('Ansible - Provision App Server') {
          steps {
            ansiColor('xterm') {
              sh '''
                cd ${WORKSPACE}
                git clone git@github.com:venki-tech/aep-ansible-provision.git
                cd ${WORKSPACE}/aep-ansible-provision
                cp ${HOME}/keys/* .
                ansible-playbook aws_ansible_pb_provision_appserver.yaml -i runninginventory.txt
              '''
            }
          }
        }

        stage('Ansible - Provision DB Server') {
          steps {
            ansiColor('xterm') {
              sh '''
                cd ${WORKSPACE}/aep-ansible-provision
                ansible-playbook aws_ansible_pb_provision_dbserver.yaml -i runninginventory.txt
              '''
            }
          }
        }

        stage('Ansible - Provision WEB Server') {
          steps {
            ansiColor('xterm') {
              sh '''
                cd ${WORKSPACE}/aep-ansible-provision
                ansible-playbook aws_ansible_pb_provision_webserver.yaml -i runninginventory.txt
              '''
            }
          }
        }

        stage('Ansible - Deploy DB Server') {
          steps {
            ansiColor('xterm') {
              sh '''
                cd ${WORKSPACE}/aep-ansible-provision
                ansible-playbook aws_ansible_pb_deploy_dbserver.yaml -i runninginventory.txt
              '''
            }
          }
        }

        stage('Ansible - Deploy APP Server') {
          steps {
            ansiColor('xterm') {
              sh '''
                cd ${WORKSPACE}/aep-ansible-provision
                ansible-playbook aws_ansible_pb_deploy_appserver.yaml -i runninginventory.txt
              '''
            }
          }
        }

    }

    post {
        success {
            echo "Success"
        }
        unstable {
            echo "Unstable"
        }
        aborted {
            echo "Aborted"
        }
        failure {
            echo "FAILURE"
        }
    }
}
